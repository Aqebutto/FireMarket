{"ast":null,"code":"import _objectSpread from \"/home/alex/Documents/CS/React/Fire Market/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/alex/Documents/CS/React/Fire Market/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport * as ROUTES from '../../constants/routes';\nvar config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\n\nvar Firebase = function Firebase() {\n  var _this = this;\n\n  _classCallCheck(this, Firebase);\n\n  this.doCreateUserWithEmailAndPassword = function (email, password) {\n    return _this.auth.createUserWithEmailAndPassword(email, password);\n  };\n\n  this.doSignInWithEmailAndPassword = function (email, password) {\n    return _this.auth.signInWithEmailAndPassword(email, password);\n  };\n\n  this.doSignInWithGoogle = function () {\n    return _this.auth.signInWithPopup(_this.googleProvider);\n  };\n\n  this.doSignInWithFacebook = function () {\n    return _this.auth.signInWithPopup(_this.facebookProvider);\n  };\n\n  this.doSignInWithTwitter = function () {\n    return _this.auth.signInWithPopup(_this.twitterProvider);\n  };\n\n  this.doSignOut = function () {\n    return _this.auth.signOut();\n  };\n\n  this.doPasswordReset = function (email) {\n    return _this.auth.sendPasswordResetEmail(email);\n  };\n\n  this.doSendEmailVerification = function () {\n    return _this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT\n    });\n  };\n\n  this.doPasswordUpdate = function (password) {\n    return _this.auth.currentUser.updatePassword(password);\n  };\n\n  this.onAuthUserListener = function (next, fallback) {\n    return _this.auth.onAuthStateChanged(function (authUser) {\n      if (authUser) {\n        return _this.user(authUser.uid).get().then(function (snapshot) {\n          var dbUser = snapshot.data(); // default empty roles\n\n          if (!dbUser.roles) {\n            dbUser.roles = [];\n          } // merge auth and db user\n\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email,\n            emailVerified: authUser.emailVerified,\n            providerData: authUser.providerData\n          }, dbUser);\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n  };\n\n  this.message = function (uid) {\n    return _this.firestore.doc(\"messages/\".concat(uid));\n  };\n\n  this.messages = function () {\n    return _this.firestore.collection('messages');\n  };\n\n  this.payments = function () {\n    return _this.firestore.collection('payments');\n  };\n\n  this.subscriptions = function () {\n    return _this.firestore.collection('subscriptions');\n  };\n\n  this.user = function (uid) {\n    return _this.firestore.doc(\"users/\".concat(uid));\n  };\n\n  this.users = function () {\n    return _this.firestore.collection('users');\n  };\n\n  app.initializeApp(config);\n  /* Helper */\n\n  this.fieldValue = app.firestore.FieldValue;\n  this.emailAuthProvider = app.auth.EmailAuthProvider;\n  /* Firestore APIs */\n\n  this.auth = app.auth();\n  this.firestore = app.firestore();\n  this.firestore.settings({\n    timestampsInSnapshots: true\n  });\n  /* Social Sign In Method Provider */\n\n  this.googleProvider = new app.auth.GoogleAuthProvider();\n  this.facebookProvider = new app.auth.FacebookAuthProvider();\n  this.twitterProvider = new app.auth.TwitterAuthProvider();\n} // *** Auth API ***\n;\n\nexport default Firebase;","map":{"version":3,"sources":["/home/alex/Documents/CS/React/Fire Market/src/components/Firebase/firebase.js"],"names":["app","ROUTES","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","googleProvider","doSignInWithFacebook","facebookProvider","doSignInWithTwitter","twitterProvider","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doSendEmailVerification","currentUser","sendEmailVerification","url","REACT_APP_CONFIRMATION_EMAIL_REDIRECT","doPasswordUpdate","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","get","then","snapshot","dbUser","data","roles","emailVerified","providerData","message","firestore","doc","messages","collection","payments","subscriptions","users","initializeApp","fieldValue","FieldValue","emailAuthProvider","EmailAuthProvider","settings","timestampsInSnapshots","GoogleAuthProvider","FacebookAuthProvider","TwitterAuthProvider"],"mappings":"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","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nimport * as ROUTES from '../../constants/routes';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n};\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n\n    /* Helper */\n\n    this.fieldValue = app.firestore.FieldValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n\n    /* Firestore APIs */\n\n    this.auth = app.auth();\n    this.firestore = app.firestore();\n    this.firestore.settings({\n      timestampsInSnapshots: true,\n    });\n\n    /* Social Sign In Method Provider */\n\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n  }\n\n  // *** Auth API ***\n\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n  doSignInWithGoogle = () =>\n    this.auth.signInWithPopup(this.googleProvider);\n\n  doSignInWithFacebook = () =>\n    this.auth.signInWithPopup(this.facebookProvider);\n\n  doSignInWithTwitter = () =>\n    this.auth.signInWithPopup(this.twitterProvider);\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n  doSendEmailVerification = () =>\n    this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT,\n    });\n\n  doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n\n  // *** Merge Auth and DB User API *** //\n\n  onAuthUserListener = (next, fallback) =>\n    this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        return this.user(authUser.uid)\n          .get()\n          .then(snapshot => {\n            const dbUser = snapshot.data();\n\n            // default empty roles\n            if (!dbUser.roles) {\n              dbUser.roles = [];\n            }\n\n            // merge auth and db user\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              emailVerified: authUser.emailVerified,\n              providerData: authUser.providerData,\n              ...dbUser,\n            };\n\n            next(authUser);\n          });\n      } else {\n        fallback();\n      }\n    });\n\n  // *** Message API ***\n\n  message = uid => this.firestore.doc(`messages/${uid}`);\n\n  messages = () => this.firestore.collection('messages');\n\n  // Stripe API\n\n  payments = () => this.firestore.collection('payments');\n\n  subscriptions = () => this.firestore.collection('subscriptions');\n\n  // *** User API ***\n\n  user = uid => this.firestore.doc(`users/${uid}`);\n\n  users = () => this.firestore.collection('users');\n}\n\nexport default Firebase;\n"]},"metadata":{},"sourceType":"module"}